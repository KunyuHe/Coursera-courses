# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_point()
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+Xlab("Fitted Values")+Ylab("Residuals")
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
plot(m_bty$.resid)
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
plot(evals$residuals)
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted))+geom_histogram()
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted))+geom_histogram(binwidth=1)
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted))+geom_histogram()
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted))+geom_histogram(binwidth=50)
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted))+geom_histogram(binwidth=0.1)
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted))+geom_histogram(binwidth=0.05)
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted))+geom_histogram(binwidth=0.05)
ggplot(data=m_bty, aes( y=.resid))+geom_jitter()
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
plot(resid(m_bty))
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted)) +geom_histogram(binwidth=0.05)+xlab(“Fitted Values”)
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted)) +geom_histogram(binwidth=0.05)+xlab("Fitted Values")
plot(resid(m_bty))
ggplot(data = evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
# type your code for the Exercise here, and Knit
ggplot(data=m_bty_gen, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty_gen, aes(x=.fitted)) +geom_histogram(binwidth=0.05)+xlab("Fitted Values")
plot(resid(m_bty_gen))
# type your code for the Exercise here, and Knit
ggplot(data=m_bty_gen, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty_gen, aes(x=.fitted)) +geom_histogram(binwidth=0.1)+xlab("Fitted Values")
plot(resid(m_bty_gen))
# type your code for the Exercise here, and Knit
summary(m_bty_gen)
# type your code for the Exercise here, and Knit
summary(m_bty)
summary(m_bty_gen)
# type your code for the Exercise here, and Knit
？relevel
# type your code for the Exercise here, and Knit
?relevel
# type your code for the Exercise here, and Knit
?relevel
m_bty_rank<-lm(score~bty_avg+rank)
# type your code for the Exercise here, and Knit
?relevel
m_bty_rank<-lm(score~bty_avg+rank,data=evals)
summary(m_bty_rank)
newprof <- data.frame(gender = "male", bty_avg = 3)
predict(m_bty_gen, newprof)
predict(m_bty_gen, newprof, interval = "prediction", level = 0.95)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
# type your code for the Exercise here, and Knit
m_full_1 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
# type your code for the Exercise here, and Knit
m_full_1 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full_1)
m1 <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m1)$adj.r.squared
m2 = lm(score ~ rank + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m2)$adj.r.squared
# type your code for the Exercise here, and Knit
m3 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits
+ pic_outfit + pic_color, data = evals)
summary(m3)$adj.r.squared
# type your code for the Exercise here, and Knit
m3 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits
+ pic_outfit + pic_color, data = evals)
summary(m3)$adj.r.squared
m4 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level  + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m4)$adj.r.squared
m5 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m5)$adj.r.squared
library(ggplot2)
library(dplyr)
library(statsr)
library(GGally)
library(vcd)
library(zoo)
load("movies.Rdata")
str(movies)
summary(movies$imdb_rating)
ggplot(data=movies, aes(x=imdb_rating))+geom_histogram(binwidth = 0.3)+xlab("Sampled IMDB Ratings") + ggtitle("Frequency Distribution of IMDB Ratings") + theme(plot.title = element_text(hjust=0.5, vjust=3))
inference(y=imdb_rating, data=movies, statistic = "mean", type = "ci", conf_level = 0.95, method = "theoretical")
summary(movies$imdb_num_votes)
ggplot(movies, aes(x=imdb_num_votes, y=imdb_rating))+geom_point()+xlab("Number of Votes")+ylab("IMDB Ratings")
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_point()+xlab("Number of Votes of the Majority")+ylab("IMDB Ratings of the Majority")
cor(movies_50000$imdb_rating, movies_50000$imdb_num_votes)
min(movies$imdb_num_votes)
rm(movies_50000)
summary(movies$imdb_rating)
ggplot(data=movies, aes(x=imdb_rating))+geom_histogram(binwidth = 0.3, fill="Yellow", color="Brown")+xlab("Sampled IMDB Ratings") + ggtitle("Frequency Distribution of IMDB Ratings") + theme(plot.title = element_text(hjust=0.5, vjust=3))
View(movies)
summary(movies$imdb_num_votes)
ggplot(movies, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, type=23)+xlab("Number of Votes")+ylab("IMDB Ratings") + ggtitle("IMDB Rating against Number of Votes", subtitle = "(with high voting numbers)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
summary(movies$imdb_num_votes)
ggplot(movies, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=23)+xlab("Number of Votes")+ylab("IMDB Ratings") + ggtitle("IMDB Rating against Number of Votes", subtitle = "(with high voting numbers)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_point()+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes (for the majority)", subtitle = "(for those with number of votes less than 50,000 times)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
cor(movies_50000$imdb_rating, movies_50000$imdb_num_votes)
min(movies$imdb_num_votes)
rm(movies_50000)
inference(y=imdb_rating, data=movies, statistic = "mean", type = "ci", conf_level = 0.95, method = "theoretical")
?inference
inference(y=imdb_rating, data=movies, statistic = "mean", type = "ci", conf_level = 0.95, method = "theoretical", show_eda_plot = FALSE)
?inference
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=23)+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes (for the majority)", subtitle = "(for those with number of votes less than 50,000 times)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
min(movies$imdb_num_votes)
rm(movies_50000)
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=10)+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes (for the majority)", subtitle = "(for those with number of votes less than 50,000 times)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
min(movies$imdb_num_votes)
rm(movies_50000)
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=5)+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes (for the majority)", subtitle = "(for those with number of votes less than 50,000 times)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
min(movies$imdb_num_votes)
rm(movies_50000)
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3)+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes (for the majority)", subtitle = "(for those with number of votes less than 50,000 times)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
min(movies$imdb_num_votes)
rm(movies_50000)
summary(movies$imdb_num_votes)
ggplot(movies, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3)+xlab("Number of Votes")+ylab("IMDB Ratings") + ggtitle("IMDB Rating against Number of Votes", subtitle = "(all included)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
summary(movies$imdb_num_votes)
ggplot(movies, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3, color="Steelblue")+xlab("Number of Votes")+ylab("IMDB Ratings") + ggtitle("IMDB Rating against Number of Votes", subtitle = "(all included)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3, color="Steelblue")+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes (for the majority)", subtitle = "(for those with number of votes less than 50,000 times)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
min(movies$imdb_num_votes)
rm(movies_50000)
summary(movies$imdb_rating)
ggplot(data=movies, aes(x=imdb_rating))+geom_histogram(binwidth = 0.3, fill="Steelblue", color="Brown")+xlab("Sampled IMDB Ratings") + ggtitle("Frequency Distribution of IMDB Ratings") + theme(plot.title = element_text(hjust=0.5, vjust=3))
summary(movies$audience_rating)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 5, fill="Yellow", color="Brown")+xlab("Rotten Tomatoed Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoed Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
summary(movies$audience_rating)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 10, fill="Yellow", color="Brown")+xlab("Rotten Tomatoed Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoed Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
summary(movies$audience_rating)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 3, fill="Yellow", color="Brown")+xlab("Rotten Tomatoed Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoed Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
summary(movies$audience_score)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 3, fill="Yellow", color="Brown")+xlab("Rotten Tomatoed Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoed Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
summary(movies$audience_score)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 3, fill="Green", color="Brown")+xlab("Rotten Tomatoed Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoed Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
summary(movies$audience_score)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 3, fill="Purple", color="Brown")+xlab("Rotten Tomatoed Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoed Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
summary(movies$audience_score)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 3, fill="darkorchid1", color="Brown")+xlab("Rotten Tomatoed Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoed Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
summary(movies$audience_score)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 3, fill="lightcoral", color="Brown")+xlab("Rotten Tomatoed Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoed Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
library(ggplot2)
library(dplyr)
library(statsr)
library(GGally)
library(vcd)
library(zoo)
load("movies.Rdata")
str(movies)
summary(movies$imdb_rating)
ggplot(data=movies, aes(x=imdb_rating))+geom_histogram(binwidth = 0.3, fill="Steelblue", color="Brown")+xlab("IMDB Rating") + ggtitle("Frequency Distribution of IMDB Rating") + theme(plot.title = element_text(hjust=0.5, vjust=3))
inference(y=imdb_rating, data=movies, statistic = "mean", type = "ci", conf_level = 0.95, method = "theoretical", show_eda_plot = FALSE)
summary(movies$imdb_num_votes)
ggplot(movies, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3, color="Steelblue")+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes", subtitle = "(all included)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3, color="Steelblue")+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes (for the majority)", subtitle = "(for those with number of votes less than 50,000 times)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
min(movies$imdb_num_votes)
rm(movies_50000)
summary(movies$audience_score)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 3, fill="lightcoral", color="Brown")+xlab("Rotten Tomatoes Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoes Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=critics_score, y=audience_score))+geom_point(size=1, shape = 3, fill="lightcoral", color="Brown")+xlab("Rotten Tomatoes Critics Score") + ylab("Rotten Tomatoes Audience Score") + ggtitle("Frequency Rotten Tomatoes Audience Score against Critics Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=critics_score, y=audience_score))+geom_point(size=1, shape = 3, color="lightcoral")+xlab("Critics Score") + ylab("Score") + ggtitle("Rotten Tomatoes Audience Score against Critics Score", subtitle = "(between numerical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=critics_score, y=audience_score))+geom_point(size=1, shape = 3, color="lightcoral")+xlab("Critics Score") + ylab("Score") + ggtitle("Rotten Tomatoes Audience Score against Critics Score", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=critics_rating, y=audience_rating))+geom_point(size=1, shape = 3, color="lightcoral")+xlab("Critics Rating") + ylab("Audience Rating") + ggtitle("Rotten Tomatoes Audience Score against Critics Score", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=critics_rating, y=audience_rating))+geom_jitter(size=1, shape = 3, color="lightcoral")+xlab("Critics Rating") + ylab("Audience Rating") + ggtitle("Rotten Tomatoes Audience Score against Critics Score", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=1, shape = 3, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=top200_box))+geom_jitter(size=1, shape = 3, color="orangered2")+xlab("Oscar Director") + ylab("Top 200 Box Office list") + ggtitle("Top 200 Box Office list against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=1, shape = 6, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=1, shape = 7, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=1, shape = 8, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=1, shape = 9, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=1, shape = 10, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=1, shape = 15, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=1, shape = 20, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=2, shape = 20, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=2, shape = 20, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=2, shape = 20, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=2, shape = 20, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=top200_box))+geom_jitter(size=30, shape = 3, color="orangered2")+xlab("Oscar Director") + ylab("Top 200 Box Office List") + ggtitle("Top 200 Box Office List against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=top200_box))+geom_jitter(size=2, shape = 30, color="orangered2")+xlab("Oscar Director") + ylab("Top 200 Box Office List") + ggtitle("Top 200 Box Office List against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=top200_box))+geom_jitter(size=2, shape = 5, color="orangered2")+xlab("Oscar Director") + ylab("Top 200 Box Office List") + ggtitle("Top 200 Box Office List against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=top200_box))+geom_jitter(size=1, shape = 5, color="orangered2")+xlab("Oscar Director") + ylab("Top 200 Box Office List") + ggtitle("Top 200 Box Office List against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=top200_box))+geom_jitter(size=1, shape = 5, color="orangered2")+xlab("Oscar Director") + ylab("Top 200 Box Office List") + ggtitle("Top 200 Box Office List against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_nom))+geom_jitter(size=2, shape = 20, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=2, shape = 20, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_nom))+geom_jitter(size=2, shape = 20, color="seagreen2")+xlab("Oscar Director") + ylab("Nominated for Oscar Picture") + ggtitle("Nominated for Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_nom))+geom_jitter(size=2, shape = 22, color="seagreen2")+xlab("Oscar Director") + ylab("Nominated for Oscar Picture") + ggtitle("Nominated for Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_nom))+geom_jitter(size=1, shape = 22, color="seagreen2")+xlab("Oscar Director") + ylab("Nominated for Oscar Picture") + ggtitle("Nominated for Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_nom))+geom_jitter(size=1, shape = 22, color="violetred1")+xlab("Oscar Director") + ylab("Nominated for Oscar Picture") + ggtitle("Nominated for Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_nom))+geom_jitter(size=1, shape = 22, color="violetred1")+xlab("Oscar Director") + ylab("Nominated for Oscar Picture") + ggtitle("Nominated for Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_nom))+geom_jitter(size=1, shape = 22, color="violetred1")+xlab("Oscar Director") + ylab("Nominated for Oscar Picture") + ggtitle("Nominated for Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_nom))+geom_jitter(size=1, shape = 22, color="violetred1")+xlab("Oscar Director") + ylab("Nominated for Oscar Picture") + ggtitle("Nominated for Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
count <- table(movies$best_dir_win, movies$best_pic_nom)
count
chisq.test(count)
movies <- movies%>%
mutate(best_cast_win=ifelse(best_actor_win == "yes" & best_actress_win == "yes", `Both`,
ifelse(best_actor_win == "yes" & best_actress_win == "no", `Best Actor Only`,
ifelse(best_actor_win == "no" & best_actress_win == "yes", `Best Actress Only`, `None`))))
movies <- movies%>%
mutate(best_cast_win=ifelse(best_actor_win == "yes" & best_actress_win == "yes", `Both`,
ifelse(best_actor_win == "yes" & best_actress_win == "no", `Best Actor Only`,
ifelse(best_actor_win == "no" & best_actress_win == "yes", `Best Actress Only`, `None`))))
movies <- movies%>%
mutate(best_cast_win=ifelse(best_actor_win == "yes" & best_actress_win == "yes", "Both",
ifelse(best_actor_win == "yes" & best_actress_win == "no", `Best Actor Only`,
ifelse(best_actor_win == "no" & best_actress_win == "yes", `Best Actress Only`, `None`))))
movies <- movies%>%
mutate(best_cast_win=ifelse(best_actor_win == "yes" & best_actress_win == "yes", "Both",
ifelse(best_actor_win == "yes" & best_actress_win == "no", "Best Actor Only",
ifelse(best_actor_win == "no" & best_actress_win == "yes", "Best Actress Only", "None"))))
initial_m <- lm(imdb_rating ~ title_type+genre+mpaa_rating+runtime+thtr_rel_month+dvd_rel_month+best_dir_win+best_cast_win, data=movies)
initial_m
initial_m <- lm(imdb_rating ~ title_type+genre+mpaa_rating+runtime+thtr_rel_month+dvd_rel_month+best_dir_win+best_cast_win, data=movies)
summary(initial_m)
library(ggplot2)
library(dplyr)
library(statsr)
library(GGally)
library(vcd)
library(zoo)
library(MASS)
?MASS
library(ggplot2)
library(dplyr)
library(statsr)
library(GGally)
library(vcd)
library(zoo)
library(MASS)
??MASS
AIC_m <- stepAIC(initial_m, k = 2)
summary(AIC_m)
AIC_m_resid <- movies$imdb_rating - predict(AIC_m, movies)
AIC_m_RMSE <- sqrt(mean(AIC_m_resid^2))
AIC_m_RMSE
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(car)
library(MASS)
load("movies.Rdata")
str(movies)
summary(movies$imdb_rating)
ggplot(data=movies, aes(x=imdb_rating))+geom_histogram(binwidth = 0.3, fill="Steelblue", color="Brown")+xlab("IMDB Rating") + ggtitle("Frequency Distribution of IMDB Rating") + theme(plot.title = element_text(hjust=0.5, vjust=3))
inference(y=imdb_rating, data=movies, statistic = "mean", type = "ci", conf_level = 0.95, method = "theoretical", show_eda_plot = FALSE)
summary(movies$imdb_num_votes)
ggplot(movies, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3, color="Steelblue")+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes", subtitle = "(all included)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3, color="Steelblue")+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes (for the majority)", subtitle = "(for those with number of votes less than 50,000 times)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
min(movies$imdb_num_votes)
rm(movies_50000)
summary(movies$audience_score)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 3, fill="lightcoral", color="Brown")+xlab("Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoes Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=critics_score, y=audience_score))+geom_point(size=1, shape = 3, color="lightcoral")+xlab("Critics Score") + ylab("Audience Score") + ggtitle("Rotten Tomatoes Audience Score against Critics Score", subtitle = "(between numerical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=critics_rating, y=audience_rating))+geom_jitter(size=1, shape = 3, color="lightcoral")+xlab("Critics Rating") + ylab("Audience Rating") + ggtitle("Rotten Tomatoes Audience Rating against Critics Rating", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_win))+geom_jitter(size=2, shape = 20, color="seagreen2")+xlab("Oscar Director") + ylab("Oscar Picture") + ggtitle("Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=top200_box))+geom_jitter(size=1, shape = 5, color="orangered2")+xlab("Oscar Director") + ylab("Top 200 Box Office List") + ggtitle("Top 200 Box Office List against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=best_dir_win, y=best_pic_nom))+geom_jitter(size=1, shape = 22, color="violetred1")+xlab("Oscar Director") + ylab("Nominated for Oscar Picture") + ggtitle("Nominated for Oscar Picture against Oscar Director", subtitle = "(between categorical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
count <- table(movies$best_dir_win, movies$best_pic_nom)
count
chisq.test(count)
movies <- movies%>%
mutate(best_cast_win=ifelse(best_actor_win == "yes" & best_actress_win == "yes", "Both",
ifelse(best_actor_win == "yes" & best_actress_win == "no", "Best Actor Only",
ifelse(best_actor_win == "no" & best_actress_win == "yes", "Best Actress Only", "None"))))
initial_m <- lm(imdb_rating ~ title_type+genre+mpaa_rating+runtime+thtr_rel_month+dvd_rel_month+best_dir_win+best_cast_win, data=movies)
summary(initial_m)
AIC_m <- stepAIC(initial_m, k = 2)
summary(AIC_m)
AIC_m_resid <- movies$imdb_rating - predict(AIC_m, movies)
AIC_m_RMSE <- sqrt(mean(AIC_m_resid^2))
AIC_m_RMSE
AIC_m_resid <- movies$imdb_rating - predict(AIC_m, movies)
AIC_m_RMSE <- sqrt(mean(AIC_m_resid^2), na.rm = TRUE )
AIC_m_resid <- movies$imdb_rating - predict(AIC_m, movies)
AIC_m_RMSE <- sqrt(mean(AIC_m_resid^2, na.rm = TRUE))
AIC_m_RMSE
BIC_m <- stepAIC(initial_m, k = log(651))
BIC_m <- stepAIC(initial_m, k=log(651))
BIC_m <- stepAIC(initial_m, k=log(651), na.rm = TRUE)
BIC_m <- stepAIC(initial_m, k=log(650), na.rm = TRUE)
?na.omit
no.na.movies <- na.omit(movies[c(predictors, response)])
no.na.movies <- na.omit(movies[c( title_type, genre, mpaa_rating, runtime, thtr_rel_month, dvd_rel_month, best_dir_win, best_cast_win, imdb_rating)])
no.na.movies <- na.omit(movies[c(title_type, genre, mpaa_rating, runtime, thtr_rel_month, dvd_rel_month, best_dir_win, best_cast_win, imdb_rating)])
no.na.movies <- na.omit(movies[c("title_type", genre, mpaa_rating, runtime, thtr_rel_month, dvd_rel_month, best_dir_win, best_cast_win, imdb_rating)])
no.na.movies <- na.omit(movies[c("title_type", "genre", "mpaa_rating", "runtime", "thtr_rel_month", "dvd_rel_month", "best_dir_win", "best_cast_win", "imdb_rating")])
movies <- na.omit(movies[c("title_type", "genre", "mpaa_rating", "runtime", "thtr_rel_month", "dvd_rel_month", "best_dir_win", "best_cast_win", "imdb_rating")])
initial_m <- lm(imdb_rating ~ title_type+genre+mpaa_rating+runtime+thtr_rel_month+dvd_rel_month+best_dir_win+best_cast_win, data=movies)
summary(initial_m)
AIC_m <- stepAIC(initial_m, k = 2)
summary(AIC_m)
AIC_m_resid <- movies$imdb_rating - predict(AIC_m, movies)
AIC_m_RMSE <- sqrt(mean(AIC_m_resid^2, na.rm = TRUE))
AIC_m_RMSE
BIC_m <- stepAIC(initial_m, k=log(650), na.rm = TRUE)
summary(BIC_m)
BIC_m_resid <- movies$imdb_rating - predict(BIC_m, movies)
BIC_m_RMSE <- sqrt(mean(BIC_m_resid^2, na.rm = TRUE))
BIC_m_RMSE
layout(matrix(c(1,2,3,4),2,2))
plot(AIC_m)
plot(AIC_m)
layout(matrix(c(1,2,3,4),2,2))
plot(AIC_m)
plot(AIC_m)
layout(matrix(c(1,2,3,4),2,2))
plot(AIC_m)
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(car)
library(MASS)
load("movies.Rdata")
str(movies)
summary(movies$imdb_rating)
ggplot(data=movies, aes(x=imdb_rating))+geom_histogram(binwidth = 0.3, fill="Steelblue", color="Brown")+xlab("IMDB Rating") + ggtitle("Frequency Distribution of IMDB Rating") + theme(plot.title = element_text(hjust=0.5, vjust=3))
inference(y=imdb_rating, data=movies, statistic = "mean", type = "ci", conf_level = 0.95, method = "theoretical", show_eda_plot = FALSE)
summary(movies$imdb_num_votes)
ggplot(movies, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3, color="Steelblue")+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes", subtitle = "(all included)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
movies_50000 <- movies %>%
filter(imdb_num_votes<=50000)
ggplot(movies_50000, aes(x=imdb_num_votes, y=imdb_rating))+geom_jitter(size=1, shape=3, color="Steelblue")+xlab("Number of Votes")+ylab("IMDB Rating") + ggtitle("IMDB Rating against Number of Votes (for the majority)", subtitle = "(for those with number of votes less than 50,000 times)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
min(movies$imdb_num_votes)
rm(movies_50000)
summary(movies$audience_score)
ggplot(data=movies, aes(x=audience_score))+geom_histogram(binwidth = 3, fill="lightcoral", color="Brown")+xlab("Audience Score") + ggtitle("Frequency Distribution of Rotten Tomatoes Audience Score") + theme(plot.title = element_text(hjust=0.5, vjust=3))
ggplot(data=movies, aes(x=critics_score, y=audience_score))+geom_point(size=1, shape = 3, color="lightcoral")+xlab("Critics Score") + ylab("Audience Score") + ggtitle("Rotten Tomatoes Audience Score against Critics Score", subtitle = "(between numerical variables)") + theme(plot.title = element_text(hjust=0.5, vjust=3), plot.subtitle = element_text(hjust=0.5, vjust=3))
View(movies)
AIC_m
Predicted <- 5.936 - 0.832 + 0 + 0 - 0.595 + 0.013 * 119
Predicted <- 5.936 - 0.832 + 0 + 0 - 0.595 + 0.013 * 119 + 12 * 0.023
Predicted <- 5.936 - 0.832 + 0 + 0 - 0.595 + 0.013 * 119 + 12 * 0.023
Predicted <- 5.936 - 0.832 + 0 + 0 - 0.595 + 0.013 * 119 + 12 * 0.023
Predicted
Residual <- 6.8 - Predicted
Residual
plot(AIC_m)
library(statsr)
install.packages("statsr")
install.packages("statsr")
library(devtools)
devtools::install_github("statswithr/statsr")
install.packages("devtools")
library(devtools)
devtools::install_github("statswithr/statsr")
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
install.packages("GGAlly")
install.packages("GGally")
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
data(evals)
# type your code for Question 3 here, and Knit
summary(evals$score)
evals1 <- evals%>%
filter(score<3)
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
data(evals)
# type your code for Question 3 here, and Knit
summary(evals$score)
evals1 <- evals%>%
filter(score<3)
# type your code for the Exercise here, and Knit
ggplot(data=evals, aes(x=age, y=bty_avg))+geom_point()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
# type your code for the Exercise here, and Knit
?geom_jitter
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm")
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
# type your code for the Exercise here, and Knit
m_bty <- lm(evals$score~evals$bty_avg)
# type your code for the Question 5 here, and Knit
ggplot(data=m_bty, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty, aes(x=.fitted)) +geom_histogram(binwidth=0.05)+xlab("Fitted Values")
plot(resid(m_bty))
ggplot(data = evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
# type your code for the Exercise here, and Knit
ggplot(data=m_bty_gen, aes(x=.fitted, y=.resid))+geom_jitter()+geom_hline(yintercept=0, linetype="dashed")+xlab("Fitted Values")+ylab("Residuals")
ggplot(data=m_bty_gen, aes(x=.fitted)) +geom_histogram(binwidth=0.1)+xlab("Fitted Values")
plot(resid(m_bty_gen))
# type your code for the Exercise here, and Knit
summary(m_bty)
summary(m_bty_gen)
# type your code for the Exercise here, and Knit
?relevel
m_bty_rank<-lm(score~bty_avg+rank,data=evals)
summary(m_bty_rank)
newprof <- data.frame(gender = "male", bty_avg = 3)
predict(m_bty_gen, newprof)
predict(m_bty_gen, newprof, interval = "prediction", level = 0.95)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
# type your code for the Exercise here, and Knit
m_full_1 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full_1)
# type your code for the Exercise here, and Knit
m3 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits
+ pic_outfit + pic_color, data = evals)
summary(m3)$adj.r.squared
m4 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level  + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m4)$adj.r.squared
m5 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m5)$adj.r.squared
View(evals)
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
data(evals)
# type your code for Question 3 here, and Knit
summary(evals$score)
evals1 <- evals%>%
filter(score<3)
